#cloud-config
write_files:

  # containerd
  - path: /etc/modules-load.d/containerd.conf
    content: |
      overlay
      br_netfilter
  - path: /etc/sysctl.d/99-kubernetes-cri.conf
    content: |
      net.bridge.bridge-nf-call-iptables  = 1
      net.ipv4.ip_forward                 = 1
      net.bridge.bridge-nf-call-ip6tables = 1

  # crictl
  - path: /etc/crictl.yaml
    content: |
      runtime-endpoint: unix:///var/run/containerd/containerd.sock
      image-endpoint: unix:///var/run/containerd/containerd.sock
      timeout: 10
      debug: false

  # kubernetes
  - path: /etc/modules-load.d/k8s.conf
    content: |
      br_netfilter

runcmd:
  - echo "================================================= Update Machine"
  - DEBIAN_FRONTEND=noninteractive apt-get update
  - DEBIAN_FRONTEND=noninteractive apt-get upgrade -y

  - echo "================================================= CloudInit Phase Install Containerd"
  - DEBIAN_FRONTEND=noninteractive apt-get install -y containerd
  - modprobe overlay
  - modprobe br_netfilter
  - sysctl --system
  - mkdir -p /etc/containerd
  - containerd config default | tee /etc/containerd/config.toml
  - sed -i 's/SystemdCgroup = false/SystemdCgroup = true/g' /etc/containerd/config.toml
  - systemctl restart containerd
  - apt-mark hold containerd

  - echo "================================================= CloudInit Phase Install Kubernetes"
  - sysctl --system
  - swapoff -a
  - curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg
  - echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
  - apt-get update
  - apt-get install -y kubelet=1.23.6-00 kubeadm=1.23.6-00 kubectl=1.23.6-00
  - apt-mark hold kubelet kubeadm kubectl
  - kubeadm init --pod-network-cidr=192.168.0.0/16

  - echo "================================================= CloudInit Phase Manage Kube Config"
  - mkdir -p $HOME/.kube
  - cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  - chown $(id -u):$(id -g) $HOME/.kube/config

  - echo "================================================= CloudInit Phase Taint Node"
  - kubectl taint nodes --all node-role.kubernetes.io/master-

  - echo "================================================= CloudInit Phase Patch Kubernetes"
  - kubectl apply -f https://docs.projectcalico.org/manifests/canal.yaml
  - kubectl apply -f https://github.com/kubernetes-sigs/metrics-server/releases/download/v0.5.2/components.yaml
  - kubectl patch deployment metrics-server -n kube-system --type 'json' -p '[{"op":"add", "path":"/spec/template/spec/containers/0/args/-", "value":"--kubelet-insecure-tls"}]'

  - echo "================================================= CloudInit Phase User Preps"
  - mkdir -p /root/.kube
  - cp -i /etc/kubernetes/admin.conf /root/.kube/config
  - echo "source <(kubectl completion bash)" >>/root/.bashrc

  - echo "================================================= CloudInit Phase Install GVisor"
  - apt-get update && apt-get install -y apt-transport-https ca-certificates curl gnupg
  - curl -fsSL https://gvisor.dev/archive.key | gpg --dearmor -o /usr/share/keyrings/gvisor-archive-keyring.gpg
  - echo "deb [arch=$(dpkg --print-architecture) signed-by=/usr/share/keyrings/gvisor-archive-keyring.gpg] https://storage.googleapis.com/gvisor/releases release main" | tee /etc/apt/sources.list.d/gvisor.list > /dev/null
  - apt-get update && apt-get install -y runsc
  - sed -i '/\[plugins."io.containerd.grpc.v1.cri".containerd.runtimes\.runc\]/i \
            [plugins."io.containerd.grpc.v1.cri".containerd.runtimes.runsc]\n          runtime_type = "io.containerd.runsc.v1"\n' /etc/containerd/config.toml
  - systemctl restart containerd

  - echo "================================================= CloudInit Phase Clone Git Repo"
  - git clone https://github.com/kubermatic-labs/trainings.git /root/tmp/trainings
  - cp -r /root/tmp/trainings/kubernetes_security/* /root

  - echo "================================================= CloudInit Phase Run Training Script"
  - /root/00_setup/setup_training.sh

  - echo "================================================= CloudInit Finished Successfully"
  - reboot
